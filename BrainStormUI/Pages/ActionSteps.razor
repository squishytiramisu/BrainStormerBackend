@page "/Projects/{ProjectId:int}/Issues/{IssueId:int}/BrainStorms/{BrainStormId:int}"
@inherits ActionStepsBase
@inject NavigationManager Navigation
@implements IAsyncDisposable

@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers

@code {

    public string NewActionStep{ get; set; }


    public async Task CreateNewActionStep()
    {
        if (NewActionStep == null)
        {
            return;
        }
        await BrainStormerService.CreateActionItem(new ActionStepModel { Description = NewActionStep, BrainStormId = BrainStorm.Id });
        await Send(NewActionStep,BrainStormId);

        NewActionStep = "";
        StateHasChanged();
    }

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Issue = await BrainStormerService.GetIssue(IssueId);
            BrainStorm = await BrainStormerService.GetBrainStorm(BrainStormId);
            ActionStepsList = await BrainStormerService.GetActionItemsByBrainStormId(BrainStormId) as List<ActionStepModel>;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
            ProblemName = "Not found";
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://dotnethf1.azurewebsites.net/actionstephub")
            .Build();
        hubConnection.On<string,int>("GetActionStep", (step,id) =>
        {
            if(id==BrainStormId)
            {
                ActionStepsList.Add(new ActionStepModel { Description = step });
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task Send(string newStep,int brainStormId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendActionStep", newStep,brainStormId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}

@if (@ActionStepsList == null)
{
    <h3>Loading...</h3>

}
else
{
    <h2>Steps to solve issue</h2>
    <h4>Main Idea: @BrainStorm.Name</h4>

    <br />


    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Add new Step</h5>
            <input type="text" class="form-control" placeholder="Idea" @bind="NewActionStep" />
            <br />
            <input type="button" class="btn btn-primary" value="Save" @onclick="async () => await CreateNewActionStep()" />



        </div>
    </div>

    <br />
    <br />

    <ol class="list-group list-group-numbered">

    @foreach (ActionStepModel actionStep in ActionStepsList)
    {
        <li class="list-group-item">@actionStep.Description</li>
    }
        </ol>




}